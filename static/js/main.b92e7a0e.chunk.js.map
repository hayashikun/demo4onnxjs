{"version":3,"sources":["components/MainPage.tsx","components/DrawableCanvas.tsx","components/MnistPage.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["MainPage","to","href","DrawableCanvas","state","drawing","hideCanvas","displayCanvas","startDrawing","x","y","setState","ctx","getContext","beginPath","props","lineWidth","moveTo","endDrawing","closePath","draw","lineTo","stroke","dCtx","this","hCtx","save","scale","canvas","width","height","clearRect","drawImage","restore","imageData","getImageData","dataWidth","dataHeight","data","Float32Array","i","length","ref","e","style","display","displayWidth","displayHeight","id","onMouseDown","nativeEvent","offsetX","offsetY","onMouseUp","onMouseLeave","onMouseMove","React","Component","MnistPage","canvasRef","useRef","useState","sessionStatus","setSessionStatus","backend","setBackend","version","setVersion","model","setModel","inferenceSession","setInferenceSession","probabilities","setProbabilities","loadModel","a","session","InferenceSession","backendHint","evaluate","current","tensor","Tensor","run","result","values","next","value","margin","onChange","target","parseInt","onClick","border","clearCanvas","ans","Array","from","v","k","idx","indexOf","Math","max","map","color","App","basename","process","exact","path","component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.b92e7a0e.chunk.js","sourcesContent":["import React from \"react\";\nimport { Link } from \"react-router-dom\";\n\nconst MainPage: React.FC = () => {\n    return (\n        <div>\n            <h1>Demo for onnxjs</h1>\n            <ul>\n                <li><Link to=\"/mnist\">MNIST</Link></li>\n            </ul>\n\n            <ul>\n                <li><a href=\"https://github.com/hayashikun/demo4onnxjs\">hayashikun/demo4onnxjs</a></li>\n                <li>\n                    <a href=\"https://github.com/microsoft/onnxjs\">microsoft/onnxjs</a>\n                    <ul>\n                        <li><a href=\"https://github.com/microsoft/onnxjs/blob/master/docs/operators.md\">operators.md</a></li>\n                    </ul>\n                </li>\n                <li>\n                    <a href=\"https://github.com/onnx/onnx\">onnx/onnx</a>\n                    <ul>\n                        <li><a href=\"https://github.com/onnx/onnx/blob/rel-1.2.3/docs/Operators.md\">Operators.md</a></li>\n                    </ul>\n                </li>\n            </ul>\n        </div>\n    );\n};\n\nexport default MainPage;\n","import React, {ComponentProps} from \"react\";\n\ninterface DrawableCanvasProps extends ComponentProps<any> {\n    dataHeight: number,\n    dataWidth: number,\n    displayHeight: number,\n    displayWidth: number,\n    lineWidth?: number\n}\n\nexport default class DrawableCanvas extends React.Component<DrawableCanvasProps> {\n    state = {\n        drawing: false\n    }\n    hideCanvas: HTMLCanvasElement | null = null;\n    displayCanvas: HTMLCanvasElement | null = null;\n\n    startDrawing = (x: number, y: number) => {\n        this.setState({drawing: true});\n        const ctx = this.displayCanvas?.getContext(\"2d\");\n        if (ctx != null) {\n            ctx.beginPath();\n            if (this.props.lineWidth) {\n                ctx.lineWidth = this.props.lineWidth;\n            }\n            ctx.moveTo(x, y);\n        }\n    }\n    endDrawing = () => {\n        this.setState({drawing: false});\n        const ctx = this.displayCanvas?.getContext(\"2d\");\n        if (ctx != null) {\n            ctx.closePath();\n        }\n    }\n    draw = (x: number, y: number) => {\n        if (!this.state.drawing) {\n            return;\n        }\n        const ctx = this.displayCanvas?.getContext(\"2d\");\n        if (ctx != null) {\n            ctx.lineTo(x, y);\n            ctx.stroke();\n        }\n    }\n\n    getImageData(): Float32Array | null {\n        const dCtx = this.displayCanvas?.getContext(\"2d\");\n        const hCtx = this.hideCanvas?.getContext(\"2d\");\n        if (dCtx == null || hCtx == null) {\n            return null;\n        }\n        hCtx.save();\n        hCtx.scale(\n            hCtx.canvas.width / dCtx.canvas.width,\n            hCtx.canvas.height / dCtx.canvas.height\n        );\n        hCtx.clearRect(0, 0, hCtx.canvas.width, dCtx.canvas.height);\n        hCtx.drawImage(dCtx.canvas, 0, 0);\n        hCtx.restore();\n        const imageData = hCtx.getImageData(0, 0, this.props.dataWidth, this.props.dataHeight);\n        const data = new Float32Array(this.props.dataWidth * this.props.dataHeight);\n        for (let i = 0; i < data.length; ++i) {\n            data[i] = imageData.data[i * 4 + 3] / 255;\n        }\n        return data;\n    }\n\n    clearCanvas() {\n        const dCtx = this.displayCanvas?.getContext(\"2d\");\n        const hCtx = this.hideCanvas?.getContext(\"2d\");\n        if (this.displayCanvas == null || dCtx == null || this.hideCanvas == null || hCtx == null) {\n            return null;\n        }\n        dCtx.clearRect(0, 0, dCtx.canvas.width, dCtx.canvas.height);\n        hCtx.clearRect(0, 0, hCtx.canvas.height, hCtx.canvas.height);\n    }\n\n    render() {\n        return (\n            <div>\n                <canvas\n                    ref={e => this.hideCanvas = e}\n                    width={this.props.dataWidth + \"px\"}\n                    height={this.props.dataHeight + \"px\"}\n                    style={{display: \"none\"}}\n                />\n                <canvas\n                    ref={e => this.displayCanvas = e}\n                    width={this.props.displayWidth + \"px\"}\n                    height={this.props.displayHeight + \"px\"}\n                    id=\"display-canvas\"\n                    onMouseDown={e => this.startDrawing(e.nativeEvent.offsetX, e.nativeEvent.offsetY)}\n                    onMouseUp={() => this.endDrawing()}\n                    onMouseLeave={() => this.endDrawing()}\n                    onMouseMove={e => this.draw(e.nativeEvent.offsetX, e.nativeEvent.offsetY)}\n                    style={this.props.style}\n                />\n            </div>\n        );\n    }\n}\n","import React, {useRef, useState} from \"react\";\nimport {InferenceSession, Tensor} from \"onnxjs\"\nimport DrawableCanvas from \"./DrawableCanvas\";\n\n\nconst MnistPage: React.FC = () => {\n    const canvasRef: React.MutableRefObject<DrawableCanvas | null> = useRef(null);\n    const [sessionStatus, setSessionStatus] = useState(\"\");\n    const [backend, setBackend] = useState(\"cpu\");\n    const [version, setVersion] = useState(9);\n    const [model, setModel] = useState(\"Net1\");\n    const [inferenceSession, setInferenceSession]: [InferenceSession | null, any] = useState(null)\n    const [probabilities, setProbabilities] = useState(new Float32Array(10))\n\n    const loadModel = async () => {\n        setSessionStatus(\"\");\n        let session = new InferenceSession({backendHint: backend});\n        try {\n            await session.loadModel(`/models/mnist_${model}_v${version}.onnx`);\n            setSessionStatus(`mnist_${model}_v${version} (${backend})`);\n            setInferenceSession(session);\n        } catch (e) {\n            setSessionStatus(\"Error: \" + e);\n        }\n    }\n\n    const evaluate = async () => {\n        let canvas = canvasRef.current;\n        if (canvas == null || inferenceSession == null) {\n            return;\n        }\n        const data = canvas.getImageData();\n        if (data == null) {\n            return;\n        }\n        const tensor = new Tensor(data, \"float32\", [1, 1, 28, 28]);\n        const result = await inferenceSession!.run([tensor]);\n        setProbabilities(result.values().next().value.data);\n    }\n\n    const clearCanvas = () => {\n        let canvas = canvasRef.current;\n        if (canvas == null) {\n            return;\n        }\n        canvas.clearCanvas();\n    }\n\n    return (\n        <div style={{margin: \"24px\"}}>\n            <h1>MNIST</h1>\n            <div>\n                Model:\n                <select value={model}\n                        onChange={(e) => {\n                            setModel(e.target.value);\n                            setSessionStatus(\"\");\n                        }}>\n                    <option value=\"Net1\">Net1</option>\n                    <option value=\"Net2\">Net2</option>\n                </select>\n            </div>\n\n            <div>\n                Backend:\n                <select value={backend}\n                        onChange={(e) => {\n                            setBackend(e.target.value);\n                            setSessionStatus(\"\");\n                        }}>\n                    <option value=\"cpu\">cpu</option>\n                    <option value=\"webgl\">webgl</option>\n                    <option value=\"wasm\">wasm</option>\n                </select>\n            </div>\n\n            <div>\n                opset version:\n                <select value={version}\n                        onChange={(e) => {\n                            setVersion(parseInt(e.target.value));\n                            setSessionStatus(\"\");\n                        }}>\n                    <option value=\"9\">9</option>\n                    <option value=\"10\">10</option>\n                    <option value=\"11\">11</option>\n                    <option value=\"12\">12</option>\n                </select>\n            </div>\n\n            <div>\n                <button onClick={loadModel}>Load</button>\n                <span>{sessionStatus}</span>\n            </div>\n\n            <DrawableCanvas\n                ref={canvasRef}\n                style={{border: \"1px solid black\", margin: \"8px\"}}\n                displayHeight={300}\n                displayWidth={300}\n                dataHeight={28}\n                dataWidth={28}\n                lineWidth={15}\n            />\n            <button onClick={evaluate}>Eval</button>\n            <button onClick={clearCanvas}>Clear</button>\n\n            <ul>{\n                (() => {\n                    const ans = Array.from({length: 10}, (v, k) => probabilities[k]);\n                    const idx = ans.indexOf(Math.max(...ans))\n                    return ans.map((a, i) =>\n                        <li key={i} style={{color: i === idx ? \"red\" : \"black\"}}>{i}: {a}</li>\n                    )\n                })()\n            }</ul>\n        </div>\n    );\n}\n\nexport default MnistPage;\n","import React from 'react';\nimport {HashRouter, Redirect, Route, Switch} from \"react-router-dom\";\nimport MainPage from \"./components/MainPage\";\nimport MnistPage from \"./components/MnistPage\";\n\nexport const App: React.FC = () => (\n    <HashRouter basename={process.env.PUBLIC_URL}>\n        <Switch>\n            <Route exact path=\"/\" component={MainPage}/>\n            <Route exact path=\"/mnist\" component={MnistPage}/>\n            <Redirect from=\"*\" to=\"/\"/>\n        </Switch>\n    </HashRouter>\n);\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport Router from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n    <React.StrictMode>\n        <Router/>\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}